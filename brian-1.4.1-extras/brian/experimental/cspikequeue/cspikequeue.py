# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cspikequeue', [dirname(__file__)])
        except ImportError:
            import _cspikequeue
            return _cspikequeue
        if fp is not None:
            try:
                _mod = imp.load_module('_cspikequeue', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cspikequeue = swig_import_helper()
    del swig_import_helper
else:
    import _cspikequeue
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SpikeQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpikeQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpikeQueue, name)
    def __init__(self, *args): 
        this = _cspikequeue.new_SpikeQueue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cspikequeue.delete_SpikeQueue
    __del__ = lambda self : None;
    __swig_setmethods__["X"] = _cspikequeue.SpikeQueue_X_set
    __swig_getmethods__["X"] = _cspikequeue.SpikeQueue_X_get
    if _newclass:X = _swig_property(_cspikequeue.SpikeQueue_X_get, _cspikequeue.SpikeQueue_X_set)
    __swig_setmethods__["n"] = _cspikequeue.SpikeQueue_n_set
    __swig_getmethods__["n"] = _cspikequeue.SpikeQueue_n_get
    if _newclass:n = _swig_property(_cspikequeue.SpikeQueue_n_get, _cspikequeue.SpikeQueue_n_set)
    __swig_setmethods__["n_delays"] = _cspikequeue.SpikeQueue_n_delays_set
    __swig_getmethods__["n_delays"] = _cspikequeue.SpikeQueue_n_delays_get
    if _newclass:n_delays = _swig_property(_cspikequeue.SpikeQueue_n_delays_get, _cspikequeue.SpikeQueue_n_delays_set)
    __swig_setmethods__["n_maxevents"] = _cspikequeue.SpikeQueue_n_maxevents_set
    __swig_getmethods__["n_maxevents"] = _cspikequeue.SpikeQueue_n_maxevents_get
    if _newclass:n_maxevents = _swig_property(_cspikequeue.SpikeQueue_n_maxevents_get, _cspikequeue.SpikeQueue_n_maxevents_set)
    __swig_setmethods__["currenttime"] = _cspikequeue.SpikeQueue_currenttime_set
    __swig_getmethods__["currenttime"] = _cspikequeue.SpikeQueue_currenttime_get
    if _newclass:currenttime = _swig_property(_cspikequeue.SpikeQueue_currenttime_get, _cspikequeue.SpikeQueue_currenttime_set)
    __swig_setmethods__["something"] = _cspikequeue.SpikeQueue_something_set
    __swig_getmethods__["something"] = _cspikequeue.SpikeQueue_something_get
    if _newclass:something = _swig_property(_cspikequeue.SpikeQueue_something_get, _cspikequeue.SpikeQueue_something_set)
    __swig_setmethods__["retarray"] = _cspikequeue.SpikeQueue_retarray_set
    __swig_getmethods__["retarray"] = _cspikequeue.SpikeQueue_retarray_get
    if _newclass:retarray = _swig_property(_cspikequeue.SpikeQueue_retarray_get, _cspikequeue.SpikeQueue_retarray_set)
    def expand(self, *args): return _cspikequeue.SpikeQueue_expand(self, *args)
    def next(self): return _cspikequeue.SpikeQueue_next(self)
    def _peek(self, *args): return _cspikequeue.SpikeQueue__peek(self, *args)
    def peek(self): return _cspikequeue.SpikeQueue_peek(self)
    def insert(self, *args): return _cspikequeue.SpikeQueue_insert(self, *args)
    def __repr__(self): return _cspikequeue.SpikeQueue___repr__(self)
    def __str__(self): return _cspikequeue.SpikeQueue___str__(self)
    def print_summary(self): return _cspikequeue.SpikeQueue_print_summary(self)
SpikeQueue_swigregister = _cspikequeue.SpikeQueue_swigregister
SpikeQueue_swigregister(SpikeQueue)



